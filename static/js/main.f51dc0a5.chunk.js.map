{"version":3,"sources":["components/my-list-item.tsx","components/my-list.tsx","components/detail.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemRoot","styled","div","props","$selected","css","ItemId","label","ItemDescription","span","ItemDetail","MyListItemComponent","onSelectedBound","onSelected","bind","item","this","isSelected","onClick","id","description","detail","selected","React","Component","Root","$useVirtualizedRendering","MyListComponent","renderItemBound","renderItem","renderRowBound","renderRow","list","getItemHeightBound","getItemHeight","prevProps","items","prevSelectedIndex","findIndex","p","newSelectedIndex","n","minIndex","Math","min","resetAfterIndex","useVirtualizedRendering","renderNormalList","renderVirtualizedList","map","index","height","width","itemCount","length","estimatedItemSize","itemSize","itemData","ref","instance","data","style","key","InputsDiv","DetailComponent","state","selectedId","undefined","useVirtualized","itemsToSend","onItemSelected","type","checked","onChange","setState","value","htmlFor","num","Array","keys","i","ceil","random","toString","padStart","AppRoot","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f51dc0a5.chunk.js","sourcesContent":["import React from 'react'\nimport { MyListItem } from './my-list'\nimport styled, { css } from 'styled-components'\n\ninterface ItemProps {\n  $selected: boolean\n}\n\nconst ItemRoot = styled.div<ItemProps>`\n  display: grid;\n  ${(props) => props.$selected && css`\n    background-color: #455A64; //#616161;\n    @media screen and (prefers-color-scheme: light) {\n        background-color: #B0BEC5; // #E0E0E0;\n      }\n  `}\n  ${(props) => !props.$selected && css`\n    &:hover {\n      background-color: #546E7A; // #757575;\n      @media screen and (prefers-color-scheme: light) {\n        background-color: #CFD8DC; // #EEEEEE;\n      }\n      cursor: pointer;\n    }\n  `}\n  grid-template-rows: auto auto;\n  grid-template-columns: auto auto 1fr;\n  grid-template-areas: 'itemId itemDesc' '. itemDetail';\n  column-gap: 1em;\n  padding-left: 0.25em;\n  padding-right: 0.25em;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n`\n\nconst ItemId = styled.label`\n  grid-area: itemId;\n`\n\nconst ItemDescription = styled.span`\n  grid-area: itemDesc;\n`\n\nconst ItemDetail = styled.span`\n  grid-area: itemDetail;\n`\n\ninterface MyListItemProps {\n  item: MyListItem\n}\n\nexport class MyListItemComponent extends React.Component<MyListItemProps> {\n  private onSelectedBound = this.onSelected.bind(this)\n  public render() {\n    const item = this.props.item\n    return (\n      <ItemRoot $selected={item.isSelected} onClick={this.onSelectedBound} >\n        <ItemId>{item.id}</ItemId>\n        <ItemDescription>{item.description}</ItemDescription>\n        {item.isSelected ? <ItemDetail>{item.detail}</ItemDetail> : null}\n      </ItemRoot>\n      )\n  }\n\n  private onSelected() {\n    this.props.item.selected(this.props.item.id)\n  }\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { MyListItemComponent } from './my-list-item'\nimport { VariableSizeList  as List } from 'react-window'\nimport { AutoSizer } from 'react-virtualized'\n\nexport interface MyListProps {\n  items: MyListItem[]\n  useVirtualizedRendering: boolean\n}\n\nexport interface MyListItem {\n  id: string\n  description: string\n  detail: string\n  isSelected: boolean\n  selected(id: string): void\n}\n\ninterface RootProps {\n  $useVirtualizedRendering: boolean\n}\n\nconst Root = styled.div<RootProps>`\n  border: solid 1px #616161;\n  @media screen and (prefers-color-scheme: light) {\n    border-color: lightgrey;\n  }\n  margin: 0.2em;\n  ${(props) => !props.$useVirtualizedRendering && css`\n    overflow-y: auto;\n  `}\n`\nconst SmallRowHeight = 27\nconst BigRowHeight = 49\n\nexport class MyListComponent extends React.Component<MyListProps> {\n  private renderItemBound = this.renderItem.bind(this)\n  private renderRowBound = this.renderRow.bind(this)\n  private list: List | null = null\n\n  public componentDidUpdate(prevProps: MyListProps) {\n    if (prevProps.items && prevProps.items !== this.props.items) {\n      const prevSelectedIndex = prevProps.items.findIndex((p) => p.isSelected)\n      const newSelectedIndex = this.props.items.findIndex((n) => n.isSelected)\n      if (newSelectedIndex < 0) {\n        return\n      }\n      const minIndex = prevSelectedIndex < 0 ? newSelectedIndex : Math.min(prevSelectedIndex || 0, newSelectedIndex)\n      this.list?.resetAfterIndex(minIndex)\n    }\n  }\n\n  public render() {\n    return (\n    <Root $useVirtualizedRendering={this.props.useVirtualizedRendering}>\n      {this.props.useVirtualizedRendering ? null : this.renderNormalList()}\n      {this.props.useVirtualizedRendering ? this.renderVirtualizedList() : null}\n    </Root>\n    )\n  }\n\n  private renderNormalList() {\n    return this.props.items.map(this.renderItemBound)\n  }\n\n  private getItemHeightBound = this.getItemHeight.bind(this)\n\n  private getItemHeight(index: number): number {\n    return this.props.items[index].isSelected ? BigRowHeight : SmallRowHeight\n  }\n\n  private renderVirtualizedList() {\n    const list = <AutoSizer>\n      {({ height, width }) => (\n      <List\n      width={width}\n      height={height}\n      itemCount={this.props.items.length}\n      estimatedItemSize={SmallRowHeight}\n      itemSize={this.getItemHeightBound}\n      itemData={this.props.items}\n      ref={(instance) => this.list = instance}\n    >\n      {this.renderRowBound}\n    </List>)}\n    </AutoSizer>\n    return list\n  }\n\n  private renderRow({data, index, style}: { data: MyListItem[], index: number, style: any }) {\n    const item = data[index]\n    return <div key={`${item.id}-${item.isSelected}`} style={style}><MyListItemComponent item={item}></MyListItemComponent></div>\n  }\n\n  private renderItem(item: MyListItem) {\n    return <MyListItemComponent item={item}></MyListItemComponent>\n  }\n}\n","import { MyListComponent, MyListItem } from './my-list'\nimport React from 'react'\nimport styled from 'styled-components'\n\ninterface DetailState {\n  items: Item[],\n  selectedId?: string\n  useVirtualized: boolean\n}\n\ninterface Item {\n  id: string\n  description: string\n  detail: string\n}\n\nconst numItemsToSend = 5000\n\nconst generateItems = (num: number) => [...Array(num).keys()].map((i) => ({\n  id: `Id: ${Math.ceil(Math.random() * 100000).toString().padStart(5, '0')}`,\n  description: `This is item number ${i + 1}`,\n  detail: `Pakage number: ${Math.ceil(Math.random() * 1000)}`\n} as Item))\n\nconst Root = styled.div`\n  display: grid;\n  grid-template-rows: auto 1fr;\n  row-gap: 0.5em;\n  overflow-y: auto;\n  margin-left: 0.25em;\n  margin-right: 0.25em;\n`\n\nconst InputsDiv = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, auto) 1fr;\n  column-gap: 1em;\n  align-items: center;\n`\n\nexport class DetailComponent extends React.Component<{}, DetailState> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      items: [],\n      selectedId: undefined,\n      useVirtualized: true\n    }\n  }\n\n  public render() {\n    const itemsToSend = this.state.items.map((item) => ({\n      id: item.id,\n      description: item.description,\n      detail: item.detail,\n      isSelected: this.state.selectedId === item.id,\n      selected: (id) => this.onItemSelected(id)\n    } as MyListItem))\n    return (\n      <Root>\n        <InputsDiv>\n          <div>\n            <input id='useVirtualized' type='checkbox' checked={this.state.useVirtualized} onChange={() => this.setState({ useVirtualized: !this.state.useVirtualized, items: [], selectedId: undefined })} value='Virtualized' />\n            <label htmlFor='useVirtualized'>Use virtualization</label>\n          </div>\n          <button onClick={() => this.setState({ items: generateItems(numItemsToSend), selectedId: 'id-0' })}>Load Data</button>\n          <button onClick={() => this.setState({ items: [], selectedId: undefined })}>Clear</button>\n        </InputsDiv>\n        <MyListComponent items={itemsToSend} useVirtualizedRendering={this.state.useVirtualized}>\n        </MyListComponent>\n      </Root>\n    )\n  }\n\n  private onItemSelected(id: string) {\n    this.setState({ selectedId: id })\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { DetailComponent } from './components/detail'\n\nconst AppRoot = styled.div`\n  display: grid;\n  height: 100vh;\n  width: 100%;\n  grid-template-rows: auto 1fr;\n  grid-template-columns: 1fr;\n  /* background-color: #282c34; */\n  /* color: white; */\n  background-color: #282c34;\n  color: white;\n  @media screen and (prefers-color-scheme: light) {\n    background-color: white;\n    color: black;\n  }\n\n  input[type='button'], input[type='submit'], button {\n    background-color: #555555;\n    color: white;\n    @media screen and (prefers-color-scheme: light) {\n      background-color: #e7e7e7;\n      color: black;\n    }\n    border: none;\n    padding: 10px 24px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    cursor: pointer;\n  }\n`\n\nconst Header = styled.div`\n  margin: 0.2em;\n  text-align: center;\n`\n\nfunction App() {\n  return (\n    <AppRoot>\n      <Header>Virtualized vs Normal List</Header>\n      <DetailComponent/>\n    </AppRoot>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}